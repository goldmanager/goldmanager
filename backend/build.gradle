plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.asciidoctor.jvm.convert' version '4.0.4'
    id 'jacoco' 
    id 'org.cyclonedx.bom' version '2.3.1'
    // Upgraded to reduce Gradle deprecation warnings in newer Gradle versions
    id 'info.solidsoft.pitest' version '1.15.1'

}

import java.util.Properties

group = 'de.goldmanager'
version = '1.0.1'
compileJava.options.encoding = 'UTF-8'

// Capture version at configuration time to avoid using Task.project at execution time (Gradle 10 compatibility)
def versionString = version.toString()

tasks.register("generateVersionProperties") {
    def outputDir = file("$buildDir/generated-resources")
    def versionFile = new File(outputDir, "version.properties")

    outputs.file(versionFile)
    doLast {
        outputDir.mkdirs()
        def properties = new Properties()
        properties.setProperty('version', versionString)
        versionFile.withWriter { writer ->
            properties.store(writer, null)
        }
    }
}
sourceSets.main.resources.srcDir("$buildDir/generated-resources")
tasks.named("processResources").configure {
    dependsOn generateVersionProperties
}

tasks.named("generateVersionProperties").configure {
    outputs.dir("$buildDir/generated-resources")
}

compileJava.dependsOn generateVersionProperties

tasks.named("classes").configure {
    dependsOn generateVersionProperties
}
 
 jacocoTestReport {
       dependsOn test // Ensure tests run before generating the report
       reports {
           xml.required.set(true)
           html.required.set(true)
       }
 }
java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

   jacocoTestCoverageVerification {
      onlyIf { !project.hasProperty('skipTests') }
      dependsOn jacocoTestReport
       violationRules {
           rule {
               limit {
                   counter = 'LINE' // Check line coverage
                   value = 'COVEREDRATIO'
                   minimum = 0.90 // Enforce minimum coverage to 90%
               }
           }
           rule {
               limit {
                   counter = 'INSTRUCTION'
                   value = 'COVEREDRATIO'
                   minimum = 0.90
               }
           }
           rule {
               limit {
                   counter = 'BRANCH'
                   value = 'COVEREDRATIO'
                   minimum = 0.80
               }
           }
       }
   }
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}

}


bootBuildImage {
    imageName = "${buildDockerImageName}:${project.version}"
   
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-config'
    implementation 'org.springframework.security:spring-security-web'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.liquibase:liquibase-core'
    implementation 'org.springframework.session:spring-session-core'
    implementation 'commons-codec:commons-codec:1.19.0'
    implementation 'io.jsonwebtoken:jjwt-api:0.12.7'
    implementation 'com.github.zafarkhaja:java-semver:0.10.2'

    implementation 'org.bouncycastle:bcprov-jdk18on:1.81'
    implementation 'org.bouncycastle:bcpkix-jdk18on:1.81'
    
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.7'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.7'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.mockito:mockito-core'

    testImplementation 'net.bytebuddy:byte-buddy'
    testImplementation 'net.bytebuddy:byte-buddy-agent'
    testImplementation 'com.h2database:h2'
    
    
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // PIT JUnit 5 support
    pitest 'org.pitest:pitest-junit5-plugin:1.2.1'

}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.named('test') {
	onlyIf { !project.hasProperty('skipTests') }
	outputs.dir snippetsDir
	useJUnitPlatform()
    // Always publish a JaCoCo report when running `test` directly
    finalizedBy jacocoTestReport
}

tasks.check {
       onlyIf { !project.hasProperty('skipTests') }
       dependsOn jacocoTestCoverageVerification
       // Run PIT only when explicitly requested to keep default checks fast
       if (project.hasProperty('runPitest')) {
           dependsOn 'pitest'
       }
       
}
tasks.named('asciidoctor') {
	inputs.dir snippetsDir
    dependsOn test
}

// PIT mutation testing configuration
pitest {
    testPlugin = 'junit5'
    junit5PluginVersion = '1.2.1'
    // Avoid deprecated ReportingExtension.getBaseDir() by setting reportDir explicitly
    reportDir = file("$buildDir/reports/pitest")
    targetClasses = [
        'com.my.goldmanager.service.*',
        'com.my.goldmanager.encoder.*',
        'com.my.goldmanager.pricecollector.*',
        'com.my.goldmanager.service.util.*',
        'com.my.goldmanager.service.dataexpimp.*'
    ]
    targetTests = [
        'com.my.goldmanager.*'
    ]
    // Reports under build/reports/pitest without timestamp for stable paths
    timestampedReports = false
    useClasspathFile = true
    failWhenNoMutations = false
    threads = 4
    // Exclude configuration/bootstrap and Spring-specific wiring from mutation
    excludedClasses = [
        'com.my.goldmanager.GoldmanagerApplication',
        'com.my.goldmanager.GoldmanagerApplication*',
        'com.my.goldmanager.config.*',
        'com.my.goldmanager.controller.*'
    ]
}
